<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
    <MODULE name="RhoConnectClient" parent="Rho">
        <HELP_OVERVIEW>is used for syncronization with Rhoconnect servers. Synchronization overview is avalable here: http://docs.rhomobile.com/rhodes/synchronization</HELP_OVERVIEW>
		
		<ALIASES>
            <ALIAS new="SyncEngine" existing="Rho.RhoConnectClient" deprecated="true"/>
        </ALIASES>

		<PROPERTIES access="STATIC">
            <DESC>These properties are used to configure RhoConnectClient global behavior or retreiving current configuration parameters.</DESC>

			
			<PROPERTY name="userName" type="STRING" readOnly="true">
				<DESC>Current username of the RhoConnectClient session if isLoggedIn is true, otherwise returns the last logged in username.</DESC>
			</PROPERTY>
			
			<PROPERTY name="pollInterval" type="INTEGER" default="60">
				<DESC>Sync poll interval in seconds. Setting this to 0 will disable polling-based sync. Sync process will be triggered automatically according to this setting.</DESC>
			</PROPERTY>
			
			<PROPERTY name="syncServer" type="STRING">
				<DESC>Sync server URL.</DESC>
			</PROPERTY>
			
			<PROPERTY name="pageSize" type="INTEGER">
				<DESC>Page size for RhoConnectClient. Default size is 2000.</DESC>
			</PROPERTY>
			
			<PROPERTY name="threadedMode" type="BOOLEAN" default="true">
				<DESC>Sets if RhoConnectClient will work in a separate thread. If true then calls to login, doSync, doSyncSource and search will perform asynchronously without delaying calling thread. Results should be handled in provided callbacks.
                    If false, all calls are blocking and resuls are returned directly from method calls.
                    Default is true.
                </DESC>
			</PROPERTY>
			
			<PROPERTY name="showStatusPopup" type="BOOLEAN" default="true">
				<DESC>Enable or disable show status popup.</DESC>
			</PROPERTY>

			<PROPERTY name="sslVerifyPeer" type="BOOLEAN" default="true">
				<DESC>Enable or disable verification of RhoConnect ssl certificates, true by default.</DESC>
			</PROPERTY>
			
		</PROPERTIES>
		
        <METHODS access="STATIC">
			
			<ALIASES>
				<ALIAS new="dosync" existing="doSync" deprecated="true">
					<DESC>Deprecated name of doSync method.</DESC>
				</ALIAS>

				<ALIAS new="set_objectnotify_url" existing="setObjectNotification" deprecated="true">
					<DESC>Deprecated name of setObjectNotification method.</DESC>
				</ALIAS>

				<ALIAS new="add_objectnotify" existing="addObjectNotify" deprecated="true">
					<DESC>Deprecated name of addObjectNotify method.</DESC>
				</ALIAS>

				<ALIAS new="clean_objectnotify" existing="cleanObjectNotify">
					<DESC>Deprecated name of cleanObjectNotify method.</DESC>
				</ALIAS>
				
				<ALIAS new="stop_sync" existing="stopSync" deprecated="true">
					<DESC>Deprecated name of stopSync method.</DESC>
				</ALIAS>
				
			</ALIASES>
			
			<METHOD name="isLoggedIn">
				<DESC>Returns true if the RhoConnectClient currently has a user session, false if not.</DESC>
				<RETURN type="BOOLEAN">
                    <DESC>True if have logged in user session, false if not.</DESC>
                </RETURN>
			</METHOD>
			
			<METHOD name="isSyncing">
				<DESC>Returns true if sync is currently in progress.</DESC>
				<RETURN type="BOOLEAN">
                    <DESC>True if sync has started but not finished yet, false otherwise</DESC>
                </RETURN>
			</METHOD>

			<METHOD name="search" hasCallback="optional" runInThread="none">
				<DESC>If you have a large dataset in your backend service, you don't have to synchronize everything with the RhoConnectClient. Instead you can filter the synchronized dataset using the RhoConnectClient's search function. Provide callback, which will be executed after search is completed.</DESC>
				
				<PARAMS>

					<PARAM name="args" type="HASH" propertyHash="true">
						<DESC>Hash of arguments passed to search</DESC>
						<PARAMS>
							<PARAM name="sourceNames" type="ARRAY">
								<DESC>Array of source names to be included in search result.</DESC>
								<CAN_BE_NIL/>
							</PARAM>
							
							<PARAM name="from" type="STRING">
								<DESC>Default is 'search'</DESC>
								<CAN_BE_NIL/>
							</PARAM>
							
							<PARAM name="searchParams" type="HASH">
								<DESC>Hash of key-value pairs to be included in search result.</DESC>
							</PARAM>
							
							<PARAM name="offset" type="INTEGER">
								<CAN_BE_NIL/>
								<DESC></DESC>
							</PARAM>
							<PARAM name="maxResults" type="INTEGER">
								<CAN_BE_NIL/>
								<DESC>Maximum number of results to be returned.</DESC>
							</PARAM>
							
							<PARAM name="progressStep" type="INTEGER">
								<DESC></DESC>
								<CAN_BE_NIL/>
							</PARAM>
							
							<PARAM name="syncChanges" type="BOOLEAN">
								<DESC></DESC>
								<CAN_BE_NIL/>
							</PARAM>
							
						</PARAMS>
					</PARAM>
									
				</PARAMS>
				<RETURN type="HASH">
                    <DESC>Will return value only if threadedMode set to false. Otherwise search results returned in callback.</DESC>
                </RETURN>
                <CALLBACK>
                    <PARAMS>
                        <PARAM name="status" type="STRING">
                            <DESC>Resulting status of search. 'ok' of completed successfully, 'error' otherwise.</DESC>
                        </PARAM>
                        
                        <PARAM name="search_params" type="HASH">
                            <DESC>search_params originally provided for the search call. Typically you want to forward the original search_params to your view that displays the results so you can perform the same query locally. Please see examples section.
                            </DESC>
                        </PARAM>

                    </PARAMS>
                </CALLBACK>
            </METHOD>
            
			<METHOD name="doSync">
				<DESC>Start the SyncEngine process and display an optional status popup.</DESC>
				<PARAMS>
					<PARAM name="showStatusPopup" type="BOOLEAN">
						<DESC>Set to true to show status popup.</DESC>
						<CAN_BE_NIL/>
					</PARAM>
					
					<PARAM name="queryParams" type="STRING">
						<DESC>Params to be passed to server.</DESC>
						<CAN_BE_NIL/>
					</PARAM>
					
					<PARAM name="syncOnlyChangedSources" type="BOOLEAN">
						<DESC>Sync only sources that have local changes.</DESC>
						<CAN_BE_NIL/>
					</PARAM>
				</PARAMS>
				<RETURN type="STRING"/>
				
            </METHOD>
			
			<METHOD name="doSyncSource">
				<DESC>Start sync for a given source name.</DESC>
				
				<PARAMS>
					<PARAM name="sourceName" type="STRING">
						<DESC>Source name.</DESC>
					</PARAM>
					
					<PARAM name="showStatusPopup" type="BOOLEAN">
						<CAN_BE_NIL/>
						<DESC>Set to true to show status popup.</DESC>
					</PARAM>
					
					<PARAM name="queryParams" type="STRING">
						<CAN_BE_NIL/>
						<DESC>Params to be passed to server.</DESC>
					</PARAM>
					
				</PARAMS>
				
				<RETURN type="STRING"/>
				
            </METHOD>
			
			<METHOD name="login" runInThread="none" hasCallback="mandatory">
				<DESC>Authenticates the user with RhoConnect. The callback will be executed when it is finished.</DESC>
				
				<PARAMS>
					<PARAM name="login" type="STRING">
						<DESC>Login name</DESC>
					</PARAM>
					
					<PARAM name="password" type="STRING">
						<DESC>Password</DESC>
					</PARAM>
					
				</PARAMS>
				
				<RETURN type="INTEGER"/>
				
            </METHOD>
						
			<METHOD name="logout">
				<DESC>Logout the user from the RhoConnect server. This removes the local user session.</DESC>
            </METHOD>
			
			<METHOD name="stopSync">
				<DESC>Stops any sync operations currently in progress.</DESC>
            </METHOD>
			
			<METHOD name="setNotification" hasCallback="mandatory" runInThread="none">
				<DESC>The RhoConnectClient system uses notifications to provide information about the sync process to a Rhodes application. Notifications can be setup once for the duration of runtime or each time a sync is triggered. One a sync is processing for a model, notifications are called with parameters containing sync process state. Your application can use this information to display different wait pages, progress bars, etc. setNotification will set notification for a model.</DESC>
				<PARAMS>
					<PARAM name="sourceName" type="STRING">
						<DESC>Source name for which notification will be enabled. Use '*' to set notification for all models.</DESC>
					</PARAM>
				</PARAMS>
            </METHOD>
			
			<METHOD name="clearNotification">
				<DESC>Clears the sync notification for a given source</DESC>
				<PARAMS>
					<PARAM name="sourceName" type="STRING">
						<DESC>Source name to clear notification.</DESC>
					</PARAM>
				</PARAMS>
            </METHOD>
			
			
			<METHOD name="setObjectNotification" hasCallback="mandatory" runInThread="none">
				<DESC>The RhoConnectClient can send a notification when a specific object on the current page has been modified. This is useful if you have frequently-changing data like feeds or timelines in your application and want them to update without the user taking any action.</DESC>
            </METHOD>
			
			<METHOD name="addObjectNotify">
				<DESC>Add the object notification by passing in an object ID</DESC>
				<PARAMS>
					<PARAM name="sourceName" type="STRING">
						<DESC>Source name for object notification.</DESC>
					</PARAM>
					<PARAM name="object" type="STRING">
						<DESC>Object ID to get notifications.</DESC>
					</PARAM>
				</PARAMS>
				
            </METHOD>
			
			<METHOD name="cleanObjectNotify">
				<DESC>Removes callback for object notifications.</DESC>
            </METHOD>
			
			<METHOD name="getLastSyncObjectCount">
				<DESC>Returns number of synced objects for a given source.</DESC>
				<PARAMS>
					<PARAM name="sourceName" type="STRING">
						<DESC>Source name.</DESC>
					</PARAM>
				</PARAMS>
				<RETURN type="INTEGER"/>
            </METHOD>
												
			<METHOD name="setSourceProperty">
                <DESC>Sets property value for a given source.</DESC>

				<PARAMS>
					<PARAM name="sourceName" type="STRING">
						<DESC>Source name.</DESC>
					</PARAM>
					
					<PARAM name="propertyName" type="STRING">
						<DESC>Property name.</DESC>
					</PARAM>
					
					<PARAM name="propertyValue" type="STRING">
						<DESC>Property value.</DESC>
					</PARAM>
				</PARAMS>
            </METHOD>
			
			<METHOD name="getSourceProperty">
                <DESC>Gets property value for a given source.</DESC>

				<PARAMS>
					<PARAM name="sourceName" type="STRING">
						<DESC>Source name.</DESC>
					</PARAM>
					
					<PARAM name="propertyName" type="STRING">
						<DESC>Property name.</DESC>
					</PARAM>
				</PARAMS>
				<RETURN type="STRING"/>
            </METHOD>
												
        </METHODS>
		
		<VER_INTRODUCED>1.0.0</VER_INTRODUCED>
        <PLATFORM>
            <!--  This section is used for the supported platform images at the top -->
        </PLATFORM>
        
        <REMARKS>
            <REMARK title="Backround synchronization on iOS">
                <DESC>
                    <![CDATA[
                        On iOS, if application is put to background, it will be suspended. To allow application finish sync after application goes to background, you can use 'finish_sync_in_background' parameter in rhoconfig.txt. When this parameter is set to '1', if sync is active in the time of background transition ( e.g. started from app_deactivate handler ), application will not be suspended until sync is finished.
                    ]]>
                    
                </DESC>
            </REMARK>
        </REMARKS>
        <EXAMPLES >
            <EXAMPLE title="Sync Authentication">
                <DESC>
                    Call login method and then handle login result in provided callback.
                </DESC>
                <SECTIONS>
                    <SECTION>
                        <DESC>
                            In your controller call login.
                        </DESC>
                        <CODE lang='ruby'>
                            <![CDATA[
                                SyncEngine.login(
                                @params['login'],
                                @params['password'],
                                url_for(:action => :login_callback)
                                )
                            ]]>
                            
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>
                            When RhoConnectClient.login completes, the callback declared is executed and receives parameters including success or failure and error messages (if any).
                        </DESC>
                        <CODE lang='ruby'>
                            <![CDATA[
                                def login_callback
                                error_code = @params['error_code'].to_i
                                if error_code == 0
                                # run sync if we were successful
                                WebView.navigate Rho::RhoConfig.options_path
                                RhoConnectClient.doSync
                                else
                                if error_code == Rho::RhoError::ERR_CUSTOMSYNCSERVER
                                @msg = @params['error_message']
                                end
                                
                                if not @msg or @msg.length == 0
                                @msg = Rho::RhoError.new(error_code).message
                                end
                                
                                WebView.navigate(
                                url_for(:action => :login, :query => {:msg => @msg})
                                )
                                end
                                end
                            ]]>
                            
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>
            
            <EXAMPLE title="Notifications">
                <DESC>In this example, once the sync process for the Account model is complete, the view will be directed to the sync_notify action (with params 'sync_complete=true') if user is on the same page.</DESC>
                <SECTIONS>
                    <SECTION>
                        <DESC>To set a notification for a model, you can use the following method:</DESC>
                        <CODE lang='ruby'>
                            <![CDATA[
                                RhoConnectClient.setNotification(
                                'Account',
                                url_for(:action => :sync_notify),
                                "sync_complete=true"
                                )
                            ]]>
                        </CODE>
                    </SECTION>
                    
                    <SECTION>
                        <DESC>Which is the same as:</DESC>
                        <CODE lang='ruby'>
                            <![CDATA[
                                Account.setNotification(
                                url_for(:action => :sync_notify),
                                "sync_complete=true"
                                )
                            ]]>
                        </CODE>
                    </SECTION>
                    
                    <SECTION>
                        <DESC>You can also set a notification for all models:</DESC>
                        <CODE lang='ruby'>
                            <![CDATA[
                                RhoConnectClient.setNotification(
                                '*',
                                url_for(:action => :sync_notify),
                                "sync_complete=true"
                                )
                            ]]>
                        </CODE>
                    </SECTION>
                    
                </SECTIONS>
            </EXAMPLE>
            
            <EXAMPLE>
                <DESC></DESC>
                <SECTIONS>
                    <SECTION>
                        <DESC></DESC>
                        <CODE lang='ruby'>
                            <![CDATA[
                            ]]>
                        </CODE>
                        
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>
            
            
        </EXAMPLES>
    </MODULE>
</API>
